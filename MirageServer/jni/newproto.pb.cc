// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: newproto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "newproto.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace utils {

namespace {

const ::google::protobuf::Descriptor* TargetImage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TargetImage_reflection_ = NULL;
const ::google::protobuf::Descriptor* VectorTargetImages_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VectorTargetImages_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_newproto() {
  protobuf_AddDesc_newproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "newproto");
  GOOGLE_CHECK(file != NULL);
  TargetImage_descriptor_ = file->message_type(0);
  static const int TargetImage_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetImage, keys_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetImage, des_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetImage, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetImage, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetImage, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetImage, rows_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetImage, cols_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetImage, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetImage, keynum_),
  };
  TargetImage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TargetImage_descriptor_,
      TargetImage::default_instance_,
      TargetImage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetImage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetImage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TargetImage));
  VectorTargetImages_descriptor_ = file->message_type(1);
  static const int VectorTargetImages_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VectorTargetImages, targets_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VectorTargetImages, datasize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VectorTargetImages, size_),
  };
  VectorTargetImages_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VectorTargetImages_descriptor_,
      VectorTargetImages::default_instance_,
      VectorTargetImages_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VectorTargetImages, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VectorTargetImages, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VectorTargetImages));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_newproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TargetImage_descriptor_, &TargetImage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VectorTargetImages_descriptor_, &VectorTargetImages::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_newproto() {
  delete TargetImage::default_instance_;
  delete TargetImage_reflection_;
  delete VectorTargetImages::default_instance_;
  delete VectorTargetImages_reflection_;
}

void protobuf_AddDesc_newproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\010newproto\022\005utils\"\215\001\n\013TargetImage\022\014\n\004key"
    "s\030\001 \003(\002\022\013\n\003des\030\002 \003(\005\022\n\n\002id\030\003 \002(\005\022\r\n\005widt"
    "h\030\004 \002(\005\022\016\n\006height\030\005 \002(\005\022\014\n\004rows\030\006 \002(\005\022\014\n"
    "\004cols\030\007 \002(\005\022\014\n\004type\030\010 \002(\005\022\016\n\006keyNum\030\t \002("
    "\005\"Y\n\022VectorTargetImages\022#\n\007targets\030\001 \003(\013"
    "2\022.utils.TargetImage\022\020\n\010dataSize\030\002 \002(\005\022\014"
    "\n\004size\030\003 \002(\005B\021\n\tcom.utilsB\004Data", 271);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "newproto", &protobuf_RegisterTypes);
  TargetImage::default_instance_ = new TargetImage();
  VectorTargetImages::default_instance_ = new VectorTargetImages();
  TargetImage::default_instance_->InitAsDefaultInstance();
  VectorTargetImages::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_newproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_newproto {
  StaticDescriptorInitializer_newproto() {
    protobuf_AddDesc_newproto();
  }
} static_descriptor_initializer_newproto_;

// ===================================================================

#ifndef _MSC_VER
const int TargetImage::kKeysFieldNumber;
const int TargetImage::kDesFieldNumber;
const int TargetImage::kIdFieldNumber;
const int TargetImage::kWidthFieldNumber;
const int TargetImage::kHeightFieldNumber;
const int TargetImage::kRowsFieldNumber;
const int TargetImage::kColsFieldNumber;
const int TargetImage::kTypeFieldNumber;
const int TargetImage::kKeyNumFieldNumber;
#endif  // !_MSC_VER

TargetImage::TargetImage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TargetImage::InitAsDefaultInstance() {
}

TargetImage::TargetImage(const TargetImage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TargetImage::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  width_ = 0;
  height_ = 0;
  rows_ = 0;
  cols_ = 0;
  type_ = 0;
  keynum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TargetImage::~TargetImage() {
  SharedDtor();
}

void TargetImage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TargetImage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TargetImage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TargetImage_descriptor_;
}

const TargetImage& TargetImage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_newproto();
  return *default_instance_;
}

TargetImage* TargetImage::default_instance_ = NULL;

TargetImage* TargetImage::New() const {
  return new TargetImage;
}

void TargetImage::Clear() {
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    id_ = 0;
    width_ = 0;
    height_ = 0;
    rows_ = 0;
    cols_ = 0;
    type_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    keynum_ = 0;
  }
  keys_.Clear();
  des_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TargetImage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float keys = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_keys:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 13, input, this->mutable_keys())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_keys())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(13)) goto parse_keys;
        if (input->ExpectTag(16)) goto parse_des;
        break;
      }

      // repeated int32 des = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_des:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_des())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_des())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_des;
        if (input->ExpectTag(24)) goto parse_id;
        break;
      }

      // required int32 id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_width;
        break;
      }

      // required int32 width = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_height;
        break;
      }

      // required int32 height = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_rows;
        break;
      }

      // required int32 rows = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rows:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rows_)));
          set_has_rows();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_cols;
        break;
      }

      // required int32 cols = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cols:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cols_)));
          set_has_cols();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_type;
        break;
      }

      // required int32 type = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_keyNum;
        break;
      }

      // required int32 keyNum = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_keyNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &keynum_)));
          set_has_keynum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TargetImage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated float keys = 1;
  for (int i = 0; i < this->keys_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      1, this->keys(i), output);
  }

  // repeated int32 des = 2;
  for (int i = 0; i < this->des_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->des(i), output);
  }

  // required int32 id = 3;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->id(), output);
  }

  // required int32 width = 4;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->width(), output);
  }

  // required int32 height = 5;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->height(), output);
  }

  // required int32 rows = 6;
  if (has_rows()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->rows(), output);
  }

  // required int32 cols = 7;
  if (has_cols()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->cols(), output);
  }

  // required int32 type = 8;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->type(), output);
  }

  // required int32 keyNum = 9;
  if (has_keynum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->keynum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TargetImage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated float keys = 1;
  for (int i = 0; i < this->keys_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(1, this->keys(i), target);
  }

  // repeated int32 des = 2;
  for (int i = 0; i < this->des_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->des(i), target);
  }

  // required int32 id = 3;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->id(), target);
  }

  // required int32 width = 4;
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->width(), target);
  }

  // required int32 height = 5;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->height(), target);
  }

  // required int32 rows = 6;
  if (has_rows()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->rows(), target);
  }

  // required int32 cols = 7;
  if (has_cols()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->cols(), target);
  }

  // required int32 type = 8;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->type(), target);
  }

  // required int32 keyNum = 9;
  if (has_keynum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->keynum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TargetImage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // required int32 id = 3;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required int32 width = 4;
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->width());
    }

    // required int32 height = 5;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->height());
    }

    // required int32 rows = 6;
    if (has_rows()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rows());
    }

    // required int32 cols = 7;
    if (has_cols()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cols());
    }

    // required int32 type = 8;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 keyNum = 9;
    if (has_keynum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->keynum());
    }

  }
  // repeated float keys = 1;
  {
    int data_size = 0;
    data_size = 4 * this->keys_size();
    total_size += 1 * this->keys_size() + data_size;
  }

  // repeated int32 des = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->des_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->des(i));
    }
    total_size += 1 * this->des_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TargetImage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TargetImage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TargetImage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TargetImage::MergeFrom(const TargetImage& from) {
  GOOGLE_CHECK_NE(&from, this);
  keys_.MergeFrom(from.keys_);
  des_.MergeFrom(from.des_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
    if (from.has_rows()) {
      set_rows(from.rows());
    }
    if (from.has_cols()) {
      set_cols(from.cols());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_keynum()) {
      set_keynum(from.keynum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TargetImage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TargetImage::CopyFrom(const TargetImage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TargetImage::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001fc) != 0x000001fc) return false;

  return true;
}

void TargetImage::Swap(TargetImage* other) {
  if (other != this) {
    keys_.Swap(&other->keys_);
    des_.Swap(&other->des_);
    std::swap(id_, other->id_);
    std::swap(width_, other->width_);
    std::swap(height_, other->height_);
    std::swap(rows_, other->rows_);
    std::swap(cols_, other->cols_);
    std::swap(type_, other->type_);
    std::swap(keynum_, other->keynum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TargetImage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TargetImage_descriptor_;
  metadata.reflection = TargetImage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int VectorTargetImages::kTargetsFieldNumber;
const int VectorTargetImages::kDataSizeFieldNumber;
const int VectorTargetImages::kSizeFieldNumber;
#endif  // !_MSC_VER

VectorTargetImages::VectorTargetImages()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void VectorTargetImages::InitAsDefaultInstance() {
}

VectorTargetImages::VectorTargetImages(const VectorTargetImages& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void VectorTargetImages::SharedCtor() {
  _cached_size_ = 0;
  datasize_ = 0;
  size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VectorTargetImages::~VectorTargetImages() {
  SharedDtor();
}

void VectorTargetImages::SharedDtor() {
  if (this != default_instance_) {
  }
}

void VectorTargetImages::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VectorTargetImages::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VectorTargetImages_descriptor_;
}

const VectorTargetImages& VectorTargetImages::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_newproto();
  return *default_instance_;
}

VectorTargetImages* VectorTargetImages::default_instance_ = NULL;

VectorTargetImages* VectorTargetImages::New() const {
  return new VectorTargetImages;
}

void VectorTargetImages::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    datasize_ = 0;
    size_ = 0;
  }
  targets_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VectorTargetImages::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .utils.TargetImage targets = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_targets:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_targets()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_targets;
        if (input->ExpectTag(16)) goto parse_dataSize;
        break;
      }

      // required int32 dataSize = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dataSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &datasize_)));
          set_has_datasize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_size;
        break;
      }

      // required int32 size = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void VectorTargetImages::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .utils.TargetImage targets = 1;
  for (int i = 0; i < this->targets_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->targets(i), output);
  }

  // required int32 dataSize = 2;
  if (has_datasize()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->datasize(), output);
  }

  // required int32 size = 3;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->size(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* VectorTargetImages::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .utils.TargetImage targets = 1;
  for (int i = 0; i < this->targets_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->targets(i), target);
  }

  // required int32 dataSize = 2;
  if (has_datasize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->datasize(), target);
  }

  // required int32 size = 3;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->size(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int VectorTargetImages::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required int32 dataSize = 2;
    if (has_datasize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->datasize());
    }

    // required int32 size = 3;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->size());
    }

  }
  // repeated .utils.TargetImage targets = 1;
  total_size += 1 * this->targets_size();
  for (int i = 0; i < this->targets_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->targets(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VectorTargetImages::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VectorTargetImages* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VectorTargetImages*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VectorTargetImages::MergeFrom(const VectorTargetImages& from) {
  GOOGLE_CHECK_NE(&from, this);
  targets_.MergeFrom(from.targets_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_datasize()) {
      set_datasize(from.datasize());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VectorTargetImages::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VectorTargetImages::CopyFrom(const VectorTargetImages& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VectorTargetImages::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;

  for (int i = 0; i < targets_size(); i++) {
    if (!this->targets(i).IsInitialized()) return false;
  }
  return true;
}

void VectorTargetImages::Swap(VectorTargetImages* other) {
  if (other != this) {
    targets_.Swap(&other->targets_);
    std::swap(datasize_, other->datasize_);
    std::swap(size_, other->size_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VectorTargetImages::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VectorTargetImages_descriptor_;
  metadata.reflection = VectorTargetImages_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace utils

// @@protoc_insertion_point(global_scope)
