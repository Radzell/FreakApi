// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: newproto

#ifndef PROTOBUF_newproto__INCLUDED
#define PROTOBUF_newproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace utils {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_newproto();
void protobuf_AssignDesc_newproto();
void protobuf_ShutdownFile_newproto();

class TargetImage;
class VectorTargetImages;

// ===================================================================

class TargetImage : public ::google::protobuf::Message {
 public:
  TargetImage();
  virtual ~TargetImage();

  TargetImage(const TargetImage& from);

  inline TargetImage& operator=(const TargetImage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TargetImage& default_instance();

  void Swap(TargetImage* other);

  // implements Message ----------------------------------------------

  TargetImage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TargetImage& from);
  void MergeFrom(const TargetImage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float keys = 1;
  inline int keys_size() const;
  inline void clear_keys();
  static const int kKeysFieldNumber = 1;
  inline float keys(int index) const;
  inline void set_keys(int index, float value);
  inline void add_keys(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      keys() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_keys();

  // repeated int32 des = 2;
  inline int des_size() const;
  inline void clear_des();
  static const int kDesFieldNumber = 2;
  inline ::google::protobuf::int32 des(int index) const;
  inline void set_des(int index, ::google::protobuf::int32 value);
  inline void add_des(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      des() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_des();

  // required int32 id = 3;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 3;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // required int32 width = 4;
  inline bool has_width() const;
  inline void clear_width();
  static const int kWidthFieldNumber = 4;
  inline ::google::protobuf::int32 width() const;
  inline void set_width(::google::protobuf::int32 value);

  // required int32 height = 5;
  inline bool has_height() const;
  inline void clear_height();
  static const int kHeightFieldNumber = 5;
  inline ::google::protobuf::int32 height() const;
  inline void set_height(::google::protobuf::int32 value);

  // required int32 rows = 6;
  inline bool has_rows() const;
  inline void clear_rows();
  static const int kRowsFieldNumber = 6;
  inline ::google::protobuf::int32 rows() const;
  inline void set_rows(::google::protobuf::int32 value);

  // required int32 cols = 7;
  inline bool has_cols() const;
  inline void clear_cols();
  static const int kColsFieldNumber = 7;
  inline ::google::protobuf::int32 cols() const;
  inline void set_cols(::google::protobuf::int32 value);

  // required int32 type = 8;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 8;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // required int32 keyNum = 9;
  inline bool has_keynum() const;
  inline void clear_keynum();
  static const int kKeyNumFieldNumber = 9;
  inline ::google::protobuf::int32 keynum() const;
  inline void set_keynum(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:utils.TargetImage)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_width();
  inline void clear_has_width();
  inline void set_has_height();
  inline void clear_has_height();
  inline void set_has_rows();
  inline void clear_has_rows();
  inline void set_has_cols();
  inline void clear_has_cols();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_keynum();
  inline void clear_has_keynum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< float > keys_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > des_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 width_;
  ::google::protobuf::int32 height_;
  ::google::protobuf::int32 rows_;
  ::google::protobuf::int32 cols_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 keynum_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_newproto();
  friend void protobuf_AssignDesc_newproto();
  friend void protobuf_ShutdownFile_newproto();

  void InitAsDefaultInstance();
  static TargetImage* default_instance_;
};
// -------------------------------------------------------------------

class VectorTargetImages : public ::google::protobuf::Message {
 public:
  VectorTargetImages();
  virtual ~VectorTargetImages();

  VectorTargetImages(const VectorTargetImages& from);

  inline VectorTargetImages& operator=(const VectorTargetImages& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VectorTargetImages& default_instance();

  void Swap(VectorTargetImages* other);

  // implements Message ----------------------------------------------

  VectorTargetImages* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VectorTargetImages& from);
  void MergeFrom(const VectorTargetImages& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .utils.TargetImage targets = 1;
  inline int targets_size() const;
  inline void clear_targets();
  static const int kTargetsFieldNumber = 1;
  inline const ::utils::TargetImage& targets(int index) const;
  inline ::utils::TargetImage* mutable_targets(int index);
  inline ::utils::TargetImage* add_targets();
  inline const ::google::protobuf::RepeatedPtrField< ::utils::TargetImage >&
      targets() const;
  inline ::google::protobuf::RepeatedPtrField< ::utils::TargetImage >*
      mutable_targets();

  // required int32 dataSize = 2;
  inline bool has_datasize() const;
  inline void clear_datasize();
  static const int kDataSizeFieldNumber = 2;
  inline ::google::protobuf::int32 datasize() const;
  inline void set_datasize(::google::protobuf::int32 value);

  // required int32 size = 3;
  inline bool has_size() const;
  inline void clear_size();
  static const int kSizeFieldNumber = 3;
  inline ::google::protobuf::int32 size() const;
  inline void set_size(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:utils.VectorTargetImages)
 private:
  inline void set_has_datasize();
  inline void clear_has_datasize();
  inline void set_has_size();
  inline void clear_has_size();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::utils::TargetImage > targets_;
  ::google::protobuf::int32 datasize_;
  ::google::protobuf::int32 size_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_newproto();
  friend void protobuf_AssignDesc_newproto();
  friend void protobuf_ShutdownFile_newproto();

  void InitAsDefaultInstance();
  static VectorTargetImages* default_instance_;
};
// ===================================================================


// ===================================================================

// TargetImage

// repeated float keys = 1;
inline int TargetImage::keys_size() const {
  return keys_.size();
}
inline void TargetImage::clear_keys() {
  keys_.Clear();
}
inline float TargetImage::keys(int index) const {
  return keys_.Get(index);
}
inline void TargetImage::set_keys(int index, float value) {
  keys_.Set(index, value);
}
inline void TargetImage::add_keys(float value) {
  keys_.Add(value);
}
inline const ::google::protobuf::RepeatedField< float >&
TargetImage::keys() const {
  return keys_;
}
inline ::google::protobuf::RepeatedField< float >*
TargetImage::mutable_keys() {
  return &keys_;
}

// repeated int32 des = 2;
inline int TargetImage::des_size() const {
  return des_.size();
}
inline void TargetImage::clear_des() {
  des_.Clear();
}
inline ::google::protobuf::int32 TargetImage::des(int index) const {
  return des_.Get(index);
}
inline void TargetImage::set_des(int index, ::google::protobuf::int32 value) {
  des_.Set(index, value);
}
inline void TargetImage::add_des(::google::protobuf::int32 value) {
  des_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
TargetImage::des() const {
  return des_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
TargetImage::mutable_des() {
  return &des_;
}

// required int32 id = 3;
inline bool TargetImage::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TargetImage::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TargetImage::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TargetImage::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 TargetImage::id() const {
  return id_;
}
inline void TargetImage::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// required int32 width = 4;
inline bool TargetImage::has_width() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TargetImage::set_has_width() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TargetImage::clear_has_width() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TargetImage::clear_width() {
  width_ = 0;
  clear_has_width();
}
inline ::google::protobuf::int32 TargetImage::width() const {
  return width_;
}
inline void TargetImage::set_width(::google::protobuf::int32 value) {
  set_has_width();
  width_ = value;
}

// required int32 height = 5;
inline bool TargetImage::has_height() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TargetImage::set_has_height() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TargetImage::clear_has_height() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TargetImage::clear_height() {
  height_ = 0;
  clear_has_height();
}
inline ::google::protobuf::int32 TargetImage::height() const {
  return height_;
}
inline void TargetImage::set_height(::google::protobuf::int32 value) {
  set_has_height();
  height_ = value;
}

// required int32 rows = 6;
inline bool TargetImage::has_rows() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TargetImage::set_has_rows() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TargetImage::clear_has_rows() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TargetImage::clear_rows() {
  rows_ = 0;
  clear_has_rows();
}
inline ::google::protobuf::int32 TargetImage::rows() const {
  return rows_;
}
inline void TargetImage::set_rows(::google::protobuf::int32 value) {
  set_has_rows();
  rows_ = value;
}

// required int32 cols = 7;
inline bool TargetImage::has_cols() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TargetImage::set_has_cols() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TargetImage::clear_has_cols() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TargetImage::clear_cols() {
  cols_ = 0;
  clear_has_cols();
}
inline ::google::protobuf::int32 TargetImage::cols() const {
  return cols_;
}
inline void TargetImage::set_cols(::google::protobuf::int32 value) {
  set_has_cols();
  cols_ = value;
}

// required int32 type = 8;
inline bool TargetImage::has_type() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TargetImage::set_has_type() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TargetImage::clear_has_type() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TargetImage::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 TargetImage::type() const {
  return type_;
}
inline void TargetImage::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// required int32 keyNum = 9;
inline bool TargetImage::has_keynum() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TargetImage::set_has_keynum() {
  _has_bits_[0] |= 0x00000100u;
}
inline void TargetImage::clear_has_keynum() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void TargetImage::clear_keynum() {
  keynum_ = 0;
  clear_has_keynum();
}
inline ::google::protobuf::int32 TargetImage::keynum() const {
  return keynum_;
}
inline void TargetImage::set_keynum(::google::protobuf::int32 value) {
  set_has_keynum();
  keynum_ = value;
}

// -------------------------------------------------------------------

// VectorTargetImages

// repeated .utils.TargetImage targets = 1;
inline int VectorTargetImages::targets_size() const {
  return targets_.size();
}
inline void VectorTargetImages::clear_targets() {
  targets_.Clear();
}
inline const ::utils::TargetImage& VectorTargetImages::targets(int index) const {
  return targets_.Get(index);
}
inline ::utils::TargetImage* VectorTargetImages::mutable_targets(int index) {
  return targets_.Mutable(index);
}
inline ::utils::TargetImage* VectorTargetImages::add_targets() {
  return targets_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::utils::TargetImage >&
VectorTargetImages::targets() const {
  return targets_;
}
inline ::google::protobuf::RepeatedPtrField< ::utils::TargetImage >*
VectorTargetImages::mutable_targets() {
  return &targets_;
}

// required int32 dataSize = 2;
inline bool VectorTargetImages::has_datasize() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VectorTargetImages::set_has_datasize() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VectorTargetImages::clear_has_datasize() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VectorTargetImages::clear_datasize() {
  datasize_ = 0;
  clear_has_datasize();
}
inline ::google::protobuf::int32 VectorTargetImages::datasize() const {
  return datasize_;
}
inline void VectorTargetImages::set_datasize(::google::protobuf::int32 value) {
  set_has_datasize();
  datasize_ = value;
}

// required int32 size = 3;
inline bool VectorTargetImages::has_size() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void VectorTargetImages::set_has_size() {
  _has_bits_[0] |= 0x00000004u;
}
inline void VectorTargetImages::clear_has_size() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void VectorTargetImages::clear_size() {
  size_ = 0;
  clear_has_size();
}
inline ::google::protobuf::int32 VectorTargetImages::size() const {
  return size_;
}
inline void VectorTargetImages::set_size(::google::protobuf::int32 value) {
  set_has_size();
  size_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace utils

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_newproto__INCLUDED
